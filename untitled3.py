# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SdZH3XSxmyX98wULD687KodcmnVhPrf1
"""



"""# Task
Develop a Streamlit application using Python to analyze real-time stock market data from Yahoo Finance. The application should allow users to input a stock symbol and time period, display historical price trends with interactive line and candlestick charts using Plotly, and show key financial statistics.

## Setup and dependencies

### Subtask:
Install necessary libraries (streamlit, yfinance, pandas, plotly).

**Reasoning**:
Install the necessary libraries using pip.
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install streamlit yfinance pandas plotly

"""## User input for stock symbol and time period

### Subtask:
Create a Streamlit interface for users to input a stock symbol and select a time period.

**Reasoning**:
Create a Streamlit interface to get user input for stock symbol and time period.
"""

import streamlit as st

st.title("Real-Time Stock Market Data Analysis")

stock_symbol = st.text_input("Enter Stock Symbol (e.g., AAPL):", "AAPL")

time_period = st.selectbox(
    "Select Time Period:",
    ('1d', '5d', '1mo', '3mo', '6mo', '1y', '2y', '5y', '10y', 'ytd', 'max')
)

st.write(f"Analyzing data for {stock_symbol} over {time_period}")

"""## Fetch stock data

### Subtask:
Use `yfinance` to download historical stock data based on user input.

**Reasoning**:
Import the `yfinance` library and download the historical stock data based on the user input variables `stock_symbol` and `time_period` from the previous step.
"""

import yfinance as yf
import pandas as pd

try:
    ticker = yf.Ticker(stock_symbol)
    historical_data = ticker.history(period=time_period)
    if historical_data.empty:
        st.warning(f"No data found for symbol: {stock_symbol} with period: {time_period}. Please check the symbol and time period.")
    else:
        st.write("Historical Data:")
        st.dataframe(historical_data)
except Exception as e:
    st.error(f"An error occurred while fetching data: {e}")

"""## Display basic information

### Subtask:
Show key financial statistics like market capitalization, 52-week highs/lows, and trading volume.

**Reasoning**:
Retrieve the ticker information and display relevant financial statistics using Streamlit, ensuring the information is available before displaying.
"""

import streamlit as st

if 'ticker' in locals() and ticker:
    try:
        info = ticker.info
        st.subheader("Key Financial Statistics")
        if 'marketCap' in info:
            st.metric("Market Cap", f"${info['marketCap']:,.0f}")
        if 'fiftyTwoWeekHigh' in info:
            st.metric("52-Week High", f"${info['fiftyTwoWeekHigh']:.2f}")
        if 'fiftyTwoWeekLow' in info:
            st.metric("52-Week Low", f"${info['fiftyTwoWeekLow']:.2f}")
        if 'averageVolume' in info:
            st.metric("Average Volume", f"{info['averageVolume']:,.0f}")
    except Exception as e:
        st.warning(f"Could not retrieve financial statistics: {e}")
else:
    st.info("Enter a stock symbol and time period to fetch data.")

"""## Generate and display charts

### Subtask:
Create interactive charts (line and candlestick) using Plotly to visualize historical price trends.

**Reasoning**:
Create interactive charts (line and candlestick) using Plotly to visualize historical price trends based on the loaded historical data.
"""

import plotly.graph_objects as go
import streamlit as st

if not historical_data.empty:
    fig = go.Figure()

    # Add Candlestick trace
    fig.add_trace(go.Candlestick(x=historical_data.index,
                                open=historical_data['Open'],
                                high=historical_data['High'],
                                low=historical_data['Low'],
                                close=historical_data['Close'],
                                name='Candlestick'))

    # Add closing price line trace
    fig.add_trace(go.Scatter(x=historical_data.index,
                            y=historical_data['Close'],
                            mode='lines',
                            name='Close Price'))

    # Update layout
    fig.update_layout(
        title=f'Historical Stock Price Analysis for {stock_symbol}',
        xaxis_title='Date',
        yaxis_title='Price',
        xaxis_rangeslider_visible=False # Hide range slider for better visualization
    )

    st.plotly_chart(fig)
else:
    st.info("No historical data available to display charts.")

"""## Run the streamlit app

### Subtask:
Provide instructions on how to run the developed Streamlit application.

## Summary:

### Data Analysis Key Findings

*   The necessary libraries (`streamlit`, `yfinance`, `pandas`, `plotly`) were successfully installed.
*   A Streamlit interface was created with input fields for the stock symbol and time period.
*   Historical stock data was successfully fetched from Yahoo Finance using the `yfinance` library based on user input.
*   Key financial statistics, including market capitalization, 52-week high/low, and average volume, were retrieved and formatted for display.
*   Interactive candlestick and line charts visualizing historical price trends were generated using Plotly.

### Insights or Next Steps

*   Consider adding technical indicators (e.g., Moving Averages, RSI, MACD) to the charts for more in-depth analysis.
*   Implement features to display real-time or delayed current stock price information alongside historical data.

# Task
Create a Streamlit application using Python that analyzes stock data fetched from Yahoo Finance. The application should allow users to input a stock symbol and time period, display historical price trends with interactive line and candlestick charts including technical indicators (Moving Averages, RSI, MACD), show key financial statistics (market capitalization, 52-week highs/lows, trading volume), and display real-time or delayed current stock price information.

## User input for stock symbol and time period

### Subtask:
Create a Streamlit interface for users to input a stock symbol and select a time period.

**Reasoning**:
Create a Streamlit interface to get user input for stock symbol and time period as requested in the subtask.
"""

import streamlit as st

st.title("Real-Time Stock Market Data Analysis")

stock_symbol = st.text_input("Enter Stock Symbol (e.g., AAPL):", "AAPL")

time_period = st.selectbox(
    "Select Time Period:",
    ('1d', '5d', '1mo', '3mo', '6mo', '1y', '2y', '5y', '10y', 'ytd', 'max')
)

st.write(f"Analyzing data for {stock_symbol} over {time_period}")

"""## Fetch stock data

### Subtask:
Use `yfinance` to download historical stock data based on user input.

**Reasoning**:
Import necessary libraries and fetch historical stock data using yfinance based on the user inputs.
"""

import yfinance as yf
import pandas as pd
import streamlit as st

if 'stock_symbol' in locals() and 'time_period' in locals():
    try:
        ticker = yf.Ticker(stock_symbol)
        historical_data = ticker.history(period=time_period)
        if historical_data.empty:
            st.warning(f"No data found for symbol: {stock_symbol} with period: {time_period}. Please check the symbol and time period.")
        else:
            st.write("Historical Data:")
            st.dataframe(historical_data)
    except Exception as e:
        st.error(f"An error occurred while fetching data: {e}")
else:
    st.info("Enter a stock symbol and time period to fetch data.")

"""## Calculate technical indicators

### Subtask:
Add columns for technical indicators (e.g., Moving Averages, RSI, MACD) to the historical data.

**Reasoning**:
Calculate and add technical indicators (SMA, RSI, MACD) to the historical data and then drop rows with NaN values.
"""

import pandas as pd
import numpy as np

# Calculate SMAs
historical_data['SMA_20'] = historical_data['Close'].rolling(window=20).mean()
historical_data['SMA_50'] = historical_data['Close'].rolling(window=50).mean()

# Calculate RSI
delta = historical_data['Close'].diff(1)
gain = delta.copy()
loss = delta.copy()
gain[gain < 0] = 0
loss[loss > 0] = 0

avg_gain = gain.ewm(span=14, adjust=False).mean()
avg_loss = abs(loss.ewm(span=14, adjust=False).mean())

rs = avg_gain / avg_loss
historical_data['RSI'] = 100 - (100 / (1 + rs))

# Calculate MACD
historical_data['EMA_12'] = historical_data['Close'].ewm(span=12, adjust=False).mean()
historical_data['EMA_26'] = historical_data['Close'].ewm(span=26, adjust=False).mean()
historical_data['MACD'] = historical_data['EMA_12'] - historical_data['EMA_26']
historical_data['Signal_Line'] = historical_data['MACD'].ewm(span=9, adjust=False).mean()

# Drop rows with NaN values
historical_data.dropna(inplace=True)

# Display the updated dataframe (optional, for debugging)
# st.dataframe(historical_data)

"""## Display basic information and real-time price

### Subtask:
Show key financial statistics like market capitalization, 52-week highs/lows, trading volume, and implement features to display real-time or delayed current stock price information.

**Reasoning**:
Display the key financial statistics and current price using Streamlit, including error handling and a check for the ticker object's availability.
"""

import streamlit as st

if 'ticker' in locals() and ticker:
    try:
        info = ticker.info
        st.subheader("Key Financial Statistics")
        if 'marketCap' in info and info['marketCap'] is not None:
            st.metric("Market Cap", f"${info['marketCap']:,.0f}")
        if 'fiftyTwoWeekHigh' in info and info['fiftyTwoWeekHigh'] is not None:
            st.metric("52-Week High", f"${info['fiftyTwoWeekHigh']:.2f}")
        if 'fiftyTwoWeekLow' in info and info['fiftyTwoWeekLow'] is not None:
            st.metric("52-Week Low", f"${info['fiftyTwoWeekLow']:.2f}")
        if 'averageVolume' in info and info['averageVolume'] is not None:
            st.metric("Average Volume", f"{info['averageVolume']:,.0f}")
        if 'currentPrice' in info and info['currentPrice'] is not None:
             st.metric("Current Price", f"${info['currentPrice']:.2f}")
        elif 'regularMarketPrice' in info and info['regularMarketPrice'] is not None:
             st.metric("Current Price", f"${info['regularMarketPrice']:.2f}")
        else:
             st.warning("Current price information not available.")

    except Exception as e:
        st.warning(f"Could not retrieve financial statistics: {e}")
else:
    st.info("Enter a stock symbol and time period to fetch data.")

"""## Generate and display charts

### Subtask:
Create interactive charts (line and candlestick) using Plotly to visualize historical price trends, including the calculated technical indicators.

**Reasoning**:
Create interactive charts (line and candlestick) using Plotly to visualize historical price trends, including the calculated technical indicators.
"""

import plotly.graph_objects as go
import streamlit as st

if not historical_data.empty:
    fig = go.Figure()

    # Add Candlestick trace
    fig.add_trace(go.Candlestick(x=historical_data.index,
                                open=historical_data['Open'],
                                high=historical_data['High'],
                                low=historical_data['Low'],
                                close=historical_data['Close'],
                                name='Candlestick'))

    # Add closing price line trace
    fig.add_trace(go.Scatter(x=historical_data.index,
                            y=historical_data['Close'],
                            mode='lines',
                            name='Close Price'))

    # Add technical indicator traces
    if 'SMA_20' in historical_data.columns:
        fig.add_trace(go.Scatter(x=historical_data.index, y=historical_data['SMA_20'], mode='lines', name='SMA 20'))
    if 'SMA_50' in historical_data.columns:
        fig.add_trace(go.Scatter(x=historical_data.index, y=historical_data['SMA_50'], mode='lines', name='SMA 50'))
    if 'RSI' in historical_data.columns:
        fig.add_trace(go.Scatter(x=historical_data.index, y=historical_data['RSI'], mode='lines', name='RSI', yaxis='y2'))
    if 'MACD' in historical_data.columns:
        fig.add_trace(go.Scatter(x=historical_data.index, y=historical_data['MACD'], mode='lines', name='MACD', yaxis='y3'))
    if 'Signal_Line' in historical_data.columns:
        fig.add_trace(go.Scatter(x=historical_data.index, y=historical_data['Signal_Line'], mode='lines', name='Signal Line', yaxis='y3'))


    # Update layout
    fig.update_layout(
        title=f'Historical Stock Price Analysis for {stock_symbol}',
        xaxis_title='Date',
        yaxis_title='Price',
        yaxis2=dict(title='RSI', overlaying='y', side='right', position=1),
        yaxis3=dict(title='MACD', overlaying='y', side='right', position=0.9),
        xaxis_rangeslider_visible=False # Hide range slider for better visualization
    )


    st.plotly_chart(fig)
else:
    st.info("No historical data available to display charts.")

"""## Run the streamlit app

### Subtask:
Provide instructions on how to run the developed Streamlit application.

**Reasoning**:
Provide instructions on how to run the Streamlit application.
"""

import streamlit as st

st.subheader("How to Run the Application")
st.write("""
1.  Save the entire code as a Python file (e.g., `stock_app.py`).
2.  Open your terminal or command prompt.
3.  Navigate to the directory where you saved the Python file.
4.  Run the command: `streamlit run stock_app.py` (replace `stock_app.py` with your filename if different).
5.  The Streamlit application will open in your web browser.
""")

"""## Summary:

### Data Analysis Key Findings

*   The application successfully fetches historical stock data and key financial statistics using the `yfinance` library based on user-provided stock symbol and time period.
*   Technical indicators including 20-day and 50-day Simple Moving Averages (SMA), Relative Strength Index (RSI), and Moving Average Convergence Divergence (MACD) were calculated and added to the historical data.
*   Interactive candlestick and line charts, incorporating the calculated technical indicators, were generated using Plotly for visualization.
*   Key financial statistics such as Market Cap, 52-Week High/Low, Average Volume, and Current Price are displayed using Streamlit metrics.

### Insights or Next Steps

*   Enhance the application by adding more technical indicators (e.g., Bollinger Bands, Volume Profile) to provide a more comprehensive analysis tool.
*   Implement features for comparing multiple stock symbols or adding fundamental analysis data to provide a broader perspective.

# Task
Create a Streamlit application using Python that analyzes stock data fetched from Yahoo Finance. The application should allow users to input a stock symbol and time period, display historical price trends with interactive line and candlestick charts including technical indicators (Moving Averages, RSI, MACD, Bollinger Bands), show key financial statistics, real-time or delayed current price information, and potentially include fundamental analysis data and the ability to compare multiple stock symbols.

## User input for stock symbol and time period

### Subtask:
Create a Streamlit interface for users to input a stock symbol and select a time period, potentially allowing for multiple symbols.

**Reasoning**:
Create a Streamlit interface to get user input for stock symbol and time period as requested in the subtask.
"""

import streamlit as st

st.title("Real-Time Stock Market Data Analysis")

stock_symbol = st.text_input("Enter Stock Symbol (e.g., AAPL):", "AAPL")

time_period = st.selectbox(
    "Select Time Period:",
    ('1d', '5d', '1mo', '3mo', '6mo', '1y', '2y', '5y', '10y', 'ytd', 'max')
)

st.write(f"Analyzing data for {stock_symbol} over {time_period}")

"""## Fetch stock data

### Subtask:
Use `yfinance` to download historical stock data for the selected symbol(s) and time period.

**Reasoning**:
Define a function to fetch historical stock data using yfinance and use it to get the data.
"""

import yfinance as yf
import pandas as pd
import streamlit as st

def fetch_historical_data(symbol, period):
    """Fetches historical stock data for a given symbol and period."""
    try:
        ticker = yf.Ticker(symbol)
        historical_data = ticker.history(period=period)
        if historical_data.empty:
            st.warning(f"No data found for symbol: {symbol} with period: {period}. Please check the symbol and time period.")
            return None
        else:
            return historical_data
    except Exception as e:
        st.error(f"An error occurred while fetching data for {symbol}: {e}")
        return None

# Assuming stock_symbol and time_period are already defined from user input
historical_data = fetch_historical_data(stock_symbol, time_period)

if historical_data is not None:
    st.write("Historical Data:")
    st.dataframe(historical_data)

"""## Calculate technical indicators

### Subtask:
Add columns for technical indicators (e.g., Moving Averages, RSI, MACD, Bollinger Bands) to the historical data.

**Reasoning**:
Calculate and add technical indicators (SMA, RSI, MACD, Bollinger Bands) to the historical data and then drop rows with NaN values.
"""

# Calculate SMAs
historical_data['SMA_20'] = historical_data['Close'].rolling(window=20).mean()
historical_data['SMA_50'] = historical_data['Close'].rolling(window=50).mean()

# Calculate RSI
delta = historical_data['Close'].diff(1)
gain = delta.copy()
loss = delta.copy()
gain[gain < 0] = 0
loss[loss > 0] = 0

avg_gain = gain.ewm(span=14, adjust=False).mean()
avg_loss = abs(loss.ewm(span=14, adjust=False).mean())

rs = avg_gain / avg_loss
historical_data['RSI'] = 100 - (100 / (1 + rs))

# Calculate MACD
historical_data['EMA_12'] = historical_data['Close'].ewm(span=12, adjust=False).mean()
historical_data['EMA_26'] = historical_data['Close'].ewm(span=26, adjust=False).mean()
historical_data['MACD'] = historical_data['EMA_12'] - historical_data['EMA_26']
historical_data['Signal_Line'] = historical_data['MACD'].ewm(span=9, adjust=False).mean()

# Calculate Bollinger Bands
historical_data['Middle_Band'] = historical_data['Close'].rolling(window=20).mean()
historical_data['Upper_Band'] = historical_data['Middle_Band'] + (historical_data['Close'].rolling(window=20).std() * 2)
historical_data['Lower_Band'] = historical_data['Middle_Band'] - (historical_data['Close'].rolling(window=20).std() * 2)

# Drop rows with NaN values
historical_data.dropna(inplace=True)

"""## Display basic information and real-time price

### Subtask:
Show key financial statistics like market capitalization, 52-week highs/lows, trading volume, and implement features to display real-time or delayed current stock price information, potentially for multiple stocks.

**Reasoning**:
Display the key financial statistics and current price using Streamlit, including error handling and a check for the ticker object's availability, and then finish the task.
"""

import streamlit as st

if 'ticker' in locals() and ticker:
    try:
        info = ticker.info
        st.subheader("Key Financial Statistics")
        if 'marketCap' in info and info['marketCap'] is not None:
            st.metric("Market Cap", f"${info['marketCap']:,.0f}")
        if 'fiftyTwoWeekHigh' in info and info['fiftyTwoWeekHigh'] is not None:
            st.metric("52-Week High", f"${info['fiftyTwoWeekHigh']:.2f}")
        if 'fiftyTwoWeekLow' in info and info['fiftyTwoWeekLow'] is not None:
            st.metric("52-Week Low", f"${info['fiftyTwoWeekLow']:.2f}")
        if 'averageVolume' in info and info['averageVolume'] is not None:
            st.metric("Average Volume", f"{info['averageVolume']:,.0f}")
        if 'currentPrice' in info and info['currentPrice'] is not None:
             st.metric("Current Price", f"${info['currentPrice']:.2f}")
        elif 'regularMarketPrice' in info and info['regularMarketPrice'] is not None:
             st.metric("Current Price", f"${info['regularMarketPrice']:.2f}")
        else:
             st.warning("Current price information not available.")

    except Exception as e:
        st.warning(f"Could not retrieve financial statistics: {e}")
else:
    st.info("Enter a stock symbol and time period to fetch data.")

"""## Generate and display charts

### Subtask:
Create interactive charts (line and candlestick) using Plotly to visualize historical price trends, including the calculated technical indicators. Consider options for comparing charts of multiple stocks.

**Reasoning**:
Create interactive charts (line and candlestick) using Plotly to visualize historical price trends, including the calculated technical indicators.
"""

import plotly.graph_objects as go
import streamlit as st

if historical_data is not None and not historical_data.empty:
    fig = go.Figure()

    # Add Candlestick trace
    fig.add_trace(go.Candlestick(x=historical_data.index,
                                open=historical_data['Open'],
                                high=historical_data['High'],
                                low=historical_data['Low'],
                                close=historical_data['Close'],
                                name='Candlestick'))

    # Add closing price line trace
    fig.add_trace(go.Scatter(x=historical_data.index,
                            y=historical_data['Close'],
                            mode='lines',
                            name='Close Price'))

    # Add technical indicator traces
    if 'SMA_20' in historical_data.columns:
        fig.add_trace(go.Scatter(x=historical_data.index, y=historical_data['SMA_20'], mode='lines', name='SMA 20'))
    if 'SMA_50' in historical_data.columns:
        fig.add_trace(go.Scatter(x=historical_data.index, y=historical_data['SMA_50'], mode='lines', name='SMA 50'))
    if 'RSI' in historical_data.columns:
        fig.add_trace(go.Scatter(x=historical_data.index, y=historical_data['RSI'], mode='lines', name='RSI', yaxis='y2'))
    if 'MACD' in historical_data.columns:
        fig.add_trace(go.Scatter(x=historical_data.index, y=historical_data['MACD'], mode='lines', name='MACD', yaxis='y3'))
    if 'Signal_Line' in historical_data.columns:
        fig.add_trace(go.Scatter(x=historical_data.index, y=historical_data['Signal_Line'], mode='lines', name='Signal Line', yaxis='y3'))
    if 'Middle_Band' in historical_data.columns:
        fig.add_trace(go.Scatter(x=historical_data.index, y=historical_data['Middle_Band'], mode='lines', name='Middle Band', line=dict(dash='dash')))
    if 'Upper_Band' in historical_data.columns:
        fig.add_trace(go.Scatter(x=historical_data.index, y=historical_data['Upper_Band'], mode='lines', name='Upper Band', line=dict(dash='dash')))
    if 'Lower_Band' in historical_data.columns:
        fig.add_trace(go.Scatter(x=historical_data.index, y=historical_data['Lower_Band'], mode='lines', name='Lower Band', line=dict(dash='dash')))


    # Update layout
    fig.update_layout(
        title=f'Historical Stock Price Analysis for {stock_symbol}',
        xaxis_title='Date',
        yaxis_title='Price',
        yaxis2=dict(title='RSI', overlaying='y', side='right', position=0.15),
        yaxis3=dict(title='MACD', overlaying='y', side='right', position=0.05),
        xaxis_rangeslider_visible=False # Hide range slider for better visualization
    )


    st.plotly_chart(fig)
else:
    st.info("No historical data available to display charts.")

"""**Reasoning**:
Provide instructions on how to run the Streamlit application.


"""

import streamlit as st

st.subheader("How to Run the Application")
st.write("""
1.  Save the entire code as a Python file (e.g., `stock_app.py`).
2.  Open your terminal or command prompt.
3.  Navigate to the directory where you saved the Python file.
4.  Run the command: `streamlit run stock_app.py` (replace `stock_app.py` with your filename if different).
5.  The Streamlit application will open in your web browser.
""")

"""## Add fundamental analysis data

### Subtask:
Explore options to fetch and display fundamental analysis data (e.g., P/E ratio, EPS, dividend yield) using `yfinance` or other sources.

**Reasoning**:
Access the ticker info and display fundamental data points using Streamlit.
"""

import streamlit as st

if 'ticker' in locals() and ticker:
    try:
        info = ticker.info
        st.subheader("Fundamental Analysis")

        # Display P/E Ratios
        if 'trailingPE' in info and info['trailingPE'] is not None:
            st.metric("P/E Ratio (Trailing)", f"{info['trailingPE']:.2f}")
        elif 'forwardPE' in info and info['forwardPE'] is not None:
             st.metric("P/E Ratio (Forward)", f"{info['forwardPE']:.2f}")
        else:
            st.info("P/E Ratio information not available.")


        # Display EPS
        if 'trailingEPS' in info and info['trailingEPS'] is not None:
            st.metric("EPS (Trailing)", f"${info['trailingEPS']:.2f}")
        elif 'forwardEPS' in info and info['forwardEPS'] is not None:
            st.metric("EPS (Forward)", f"${info['forwardEPS']:.2f}")
        else:
            st.info("EPS information not available.")


        # Display Dividend Yield
        if 'dividendYield' in info and info['dividendYield'] is not None:
            st.metric("Dividend Yield", f"{info['dividendYield']:.2%}")
        else:
            st.info("Dividend Yield information not available.")

    except Exception as e:
        st.warning(f"Could not retrieve fundamental analysis data: {e}")
else:
    st.info("Enter a stock symbol and time period to fetch data and view fundamental analysis.")

"""## Run the streamlit app

### Subtask:
Provide instructions on how to run the developed Streamlit application.

**Reasoning**:
Provide instructions on how to run the Streamlit application.
"""

import streamlit as st

st.subheader("How to Run the Application")
st.write("""
1.  Save the entire code developed for this application as a Python file (e.g., `stock_analyzer.py`).
2.  Open a terminal or command prompt on your computer.
3.  Navigate to the directory where you saved the Python file using the `cd` command.
4.  Run the Streamlit application by executing the command: `streamlit run stock_analyzer.py` (replace `stock_analyzer.py` with the actual name of your Python file if it's different).
5.  Observe the output in the terminal. Streamlit will typically provide a local URL (e.g., `http://localhost:8501`) where you can access the application in your web browser.
6.  Open your web browser and go to the provided URL to interact with the stock analysis application.
""")

"""## Summary:

### Data Analysis Key Findings

*   The application successfully uses `yfinance` to fetch historical stock data for a user-specified symbol and time period.
*   Technical indicators such as SMA (20 and 50 day), RSI, MACD (and its signal line), and Bollinger Bands were successfully calculated and added to the historical data.
*   Key financial statistics like market capitalization, 52-week high/low, average trading volume, and current price are fetched and displayed.
*   Fundamental analysis data including P/E ratios (trailing and forward), EPS (trailing and forward), and dividend yield are retrieved and presented.
*   Interactive charts (candlestick and line) visualizing price trends and technical indicators are generated using Plotly.
*   The application provides clear instructions on how to run the Streamlit app from the command line.

### Insights or Next Steps

*   Implement features for comparing multiple stock symbols side-by-side on charts and in key statistics displays to enhance comparative analysis.
*   Explore adding more advanced technical indicators and fundamental metrics to provide a more comprehensive analysis tool.

# Task
Develop a Streamlit application using Python to analyze real-time and historical stock data for multiple symbols. The application should fetch data using `yfinance`, calculate and display various technical indicators (Moving Averages, RSI, MACD, Bollinger Bands, Volume Profile), show key financial statistics, real-time/delayed prices, and fundamental analysis data. It should also generate interactive charts (line, candlestick, volume) for comparing multiple stocks side-by-side.

## User input for stock symbols and time period

### Subtask:
Create a Streamlit interface for users to input multiple stock symbols and select a time period.

**Reasoning**:
Create a Streamlit interface to get user input for multiple stock symbols and a time period as requested in the subtask.
"""

import streamlit as st

st.title("Real-Time Stock Market Data Analysis")

stock_symbols_input = st.text_input(
    "Enter Stock Symbols (e.g., AAPL,MSFT):", "AAPL,MSFT"
)
stock_symbols = [symbol.strip().upper() for symbol in stock_symbols_input.split(',')]

time_period = st.selectbox(
    "Select Time Period:",
    ('1d', '5d', '1mo', '3mo', '6mo', '1y', '2y', '5y', '10y', 'ytd', 'max')
)

st.write(f"Analyzing data for {stock_symbols} over {time_period}")

"""## Fetch stock data

### Subtask:
Use `yfinance` to download historical stock data for the selected symbols and time period.

**Reasoning**:
Define a function to fetch historical stock data using yfinance and use it to get the data for all entered symbols.
"""

import yfinance as yf
import pandas as pd
import streamlit as st

def fetch_historical_data(symbol, period):
    """Fetches historical stock data for a given symbol and period."""
    try:
        ticker = yf.Ticker(symbol)
        historical_data = ticker.history(period=period)
        if historical_data.empty:
            st.warning(f"No data found for symbol: {symbol} with period: {period}. Please check the symbol and time period.")
            return None
        else:
            return historical_data
    except Exception as e:
        st.error(f"An error occurred while fetching data for {symbol}: {e}")
        return None

# Assuming stock_symbols and time_period are already defined from user input
historical_data_dict = {}
for symbol in stock_symbols:
    data = fetch_historical_data(symbol, time_period)
    if data is not None:
        historical_data_dict[symbol] = data

if historical_data_dict:
    st.write("Historical Data:")
    for symbol, data in historical_data_dict.items():
        st.write(f"Data for {symbol}:")
        st.dataframe(data)
else:
    st.info("No historical data found for the specified symbols and time period.")

"""## Calculate technical indicators

### Subtask:
Add columns for technical indicators (e.g., Moving Averages, RSI, MACD, Bollinger Bands, Volume Profile) to the historical data for each stock.

**Reasoning**:
Calculate and add technical indicators (SMA, RSI, MACD, Bollinger Bands) to the historical data for each stock in the dictionary and then drop rows with NaN values.
"""

import numpy as np

for symbol, data in historical_data_dict.items():
    # Calculate SMAs
    data['SMA_20'] = data['Close'].rolling(window=20).mean()
    data['SMA_50'] = data['Close'].rolling(window=50).mean()

    # Calculate RSI
    delta = data['Close'].diff(1)
    gain = delta.copy()
    loss = delta.copy()
    gain[gain < 0] = 0
    loss[loss > 0] = 0

    # Use pandas ewm for exponential moving average
    avg_gain = gain.ewm(span=14, adjust=False).mean()
    avg_loss = abs(loss.ewm(span=14, adjust=False).mean())

    rs = avg_gain / avg_loss
    data['RSI'] = 100 - (100 / (1 + rs))

    # Calculate MACD
    data['EMA_12'] = data['Close'].ewm(span=12, adjust=False).mean()
    data['EMA_26'] = data['Close'].ewm(span=26, adjust=False).mean()
    data['MACD'] = data['EMA_12'] - data['EMA_26']
    data['Signal_Line'] = data['MACD'].ewm(span=9, adjust=False).mean()

    # Calculate Bollinger Bands
    data['Middle_Band'] = data['Close'].rolling(window=20).mean()
    data['Upper_Band'] = data['Middle_Band'] + (data['Close'].rolling(window=20).std() * 2)
    data['Lower_Band'] = data['Middle_Band'] - (data['Close'].rolling(window=20).std() * 2)

    # Volume Profile (Conceptual - simplified for historical data)
    # For historical data, we can calculate a simple moving average of volume
    data['Volume_SMA_20'] = data['Volume'].rolling(window=20).mean()


    # Drop rows with NaN values
    data.dropna(inplace=True)

"""## Display basic information and real-time prices

### Subtask:
Show key financial statistics, real-time or delayed current stock price information for each selected stock.

**Reasoning**:
Display the key financial statistics and current price for each stock using Streamlit, including error handling and checks for data availability.
"""

import streamlit as st
import yfinance as yf

if historical_data_dict:
    st.subheader("Key Financial Statistics and Current Price")
    for symbol in historical_data_dict.keys():
        st.write(f"**{symbol}**")
        try:
            ticker = yf.Ticker(symbol)
            info = ticker.info

            # Display Key Financial Statistics
            if 'marketCap' in info and info['marketCap'] is not None:
                st.metric("Market Cap", f"${info['marketCap']:,.0f}")
            if 'fiftyTwoWeekHigh' in info and info['fiftyTwoWeekHigh'] is not None:
                st.metric("52-Week High", f"${info['fiftyTwoWeekHigh']:.2f}")
            if 'fiftyTwoWeekLow' in info and info['fiftyTwoWeekLow'] is not None:
                st.metric("52-Week Low", f"${info['fiftyTwoWeekLow']:.2f}")
            if 'averageVolume' in info and info['averageVolume'] is not None:
                st.metric("Average Volume", f"{info['averageVolume']:,.0f}")

            # Display Current Price
            if 'currentPrice' in info and info['currentPrice'] is not None:
                 st.metric("Current Price", f"${info['currentPrice']:.2f}")
            elif 'regularMarketPrice' in info and info['regularMarketPrice'] is not None:
                 st.metric("Current Price", f"${info['regularMarketPrice']:.2f}")
            else:
                 st.warning(f"Current price information not available for {symbol}.")

        except Exception as e:
            st.warning(f"Could not retrieve financial statistics for {symbol}: {e}")
else:
    st.info("Enter stock symbols and a time period to fetch data.")

"""## Add fundamental analysis data

### Subtask:
Explore options to fetch and display fundamental analysis data (e.g., P/E ratio, EPS, dividend yield, balance sheet, income statement) using `yfinance` or other sources.

**Reasoning**:
Iterate through the historical_data_dict, retrieve fundamental data using ticker.info, and display the relevant fundamental data points using Streamlit's subheader, write, and metric functions, including error handling and data availability checks.
"""

import streamlit as st
import yfinance as yf

if historical_data_dict:
    st.subheader("Fundamental Analysis")
    for symbol in historical_data_dict.keys():
        st.write(f"**{symbol}**")
        try:
            ticker = yf.Ticker(symbol)
            info = ticker.info

            # Display P/E Ratios
            if 'trailingPE' in info and info['trailingPE'] is not None:
                st.metric("P/E Ratio (Trailing)", f"{info['trailingPE']:.2f}")
            elif 'forwardPE' in info and info['forwardPE'] is not None:
                 st.metric("P/E Ratio (Forward)", f"{info['forwardPE']:.2f}")
            else:
                st.info(f"P/E Ratio information not available for {symbol}.")

            # Display EPS
            if 'trailingEPS' in info and info['trailingEPS'] is not None:
                st.metric("EPS (Trailing)", f"${info['trailingEPS']:.2f}")
            elif 'forwardEPS' in info and info['forwardEPS'] is not None:
                st.metric("EPS (Forward)", f"${info['forwardEPS']:.2f}")
            else:
                st.info(f"EPS information not available for {symbol}.")

            # Display Dividend Yield
            if 'dividendYield' in info and info['dividendYield'] is not None:
                st.metric("Dividend Yield", f"{info['dividendYield']:.2%}")
            else:
                st.info(f"Dividend Yield information not available for {symbol}.")

             # Display Balance Sheet (limited data available via ticker.info)
            if 'totalAssets' in info and info['totalAssets'] is not None:
                st.metric("Total Assets", f"${info['totalAssets']:,.0f}")
            if 'totalLiabilities' in info and info['totalLiabilities'] is not None:
                st.metric("Total Liabilities", f"${info['totalLiabilities']:,.0f}")
            if 'totalStockholderEquity' in info and info['totalStockholderEquity'] is not None:
                 st.metric("Total Stockholder Equity", f"${info['totalStockholderEquity']:,.0f}")
            else:
                st.info(f"Limited Balance Sheet information available for {symbol}.")


            # Display Income Statement (limited data available via ticker.info)
            if 'revenue' in info and info['revenue'] is not None:
                st.metric("Revenue", f"${info['revenue']:,.0f}")
            if 'grossProfits' in info and info['grossProfits'] is not None:
                 st.metric("Gross Profits", f"${info['grossProfits']:,.0f}")
            if 'netIncomeToCommon' in info and info['netIncomeToCommon'] is not None:
                 st.metric("Net Income", f"${info['netIncomeToCommon']:,.0f}")
            else:
                 st.info(f"Limited Income Statement information available for {symbol}.")


        except Exception as e:
            st.warning(f"Could not retrieve fundamental analysis data for {symbol}: {e}")
else:
    st.info("Enter stock symbols and a time period to fetch data and view fundamental analysis.")

"""## Generate and display charts

### Subtask:
Create interactive charts (line, candlestick, volume) using Plotly to visualize historical price trends and technical indicators. Implement options for comparing charts of multiple stocks.

**Reasoning**:
Check if historical_data_dict is not empty and iterate through it to create and display Plotly charts for each stock, including technical indicators and volume.
"""

import plotly.graph_objects as go
import streamlit as st

if historical_data_dict:
    st.subheader("Historical Price Trends and Technical Indicators")
    for symbol, data in historical_data_dict.items():
        st.write(f"**{symbol}**")
        if not data.empty:
            fig = go.Figure()

            # Add Candlestick trace
            fig.add_trace(go.Candlestick(x=data.index,
                                        open=data['Open'],
                                        high=data['High'],
                                        low=data['Low'],
                                        close=data['Close'],
                                        name='Candlestick'))

            # Add closing price line trace
            fig.add_trace(go.Scatter(x=data.index,
                                    y=data['Close'],
                                    mode='lines',
                                    name='Close Price'))

            # Add technical indicator traces
            if 'SMA_20' in data.columns:
                fig.add_trace(go.Scatter(x=data.index, y=data['SMA_20'], mode='lines', name='SMA 20'))
            if 'SMA_50' in data.columns:
                fig.add_trace(go.Scatter(x=data.index, y=data['SMA_50'], mode='lines', name='SMA 50'))
            if 'RSI' in data.columns:
                fig.add_trace(go.Scatter(x=data.index, y=data['RSI'], mode='lines', name='RSI', yaxis='y2'))
            if 'MACD' in data.columns:
                fig.add_trace(go.Scatter(x=data.index, y=data['MACD'], mode='lines', name='MACD', yaxis='y3'))
            if 'Signal_Line' in data.columns:
                fig.add_trace(go.Scatter(x=data.index, y=data['Signal_Line'], mode='lines', name='Signal Line', yaxis='y3'))
            if 'Middle_Band' in data.columns:
                fig.add_trace(go.Scatter(x=data.index, y=data['Middle_Band'], mode='lines', name='Middle Band', line=dict(dash='dash')))
            if 'Upper_Band' in data.columns:
                fig.add_trace(go.Scatter(x=data.index, y=data['Upper_Band'], mode='lines', name='Upper Band', line=dict(dash='dash')))
            if 'Lower_Band' in data.columns:
                fig.add_trace(go.Scatter(x=data.index, y=data['Lower_Band'], mode='lines', name='Lower Band', line=dict(dash='dash')))

            # Add Volume trace
            if 'Volume' in data.columns:
                 fig.add_trace(go.Bar(x=data.index, y=data['Volume'], name='Volume', yaxis='y4', opacity=0.5))


            # Update layout
            fig.update_layout(
                title=f'Historical Stock Price Analysis for {symbol}',
                xaxis_title='Date',
                yaxis_title='Price',
                yaxis2=dict(title='RSI', overlaying='y', side='right', position=0.15),
                yaxis3=dict(title='MACD', overlaying='y', side='right', position=0.05),
                yaxis4=dict(title='Volume', overlaying='y', side='left', position=0, showgrid=False),
                xaxis_rangeslider_visible=False # Hide range slider for better visualization
            )


            st.plotly_chart(fig)
        else:
            st.info(f"No historical data available to display charts for {symbol}.")
else:
    st.info("Enter stock symbols and a time period to fetch data.")

"""**Reasoning**:
Provide instructions on how to run the Streamlit application.


"""

import streamlit as st

st.subheader("How to Run the Application")
st.write("""
1.  Save the entire code developed for this application as a Python file (e.g., `stock_analyzer_app.py`).
2.  Open a terminal or command prompt on your computer.
3.  Navigate to the directory where you saved the Python file using the `cd` command.
4.  Run the Streamlit application by executing the command: `streamlit run stock_analyzer_app.py` (replace `stock_analyzer_app.py` with the actual name of your Python file if it's different).
5.  Observe the output in the terminal. Streamlit will typically provide a local URL (e.g., `http://localhost:8501`) where you can access the application in your web browser.
6.  Open your web browser and go to the provided URL to interact with the stock analysis application.
""")

"""## Run the streamlit app

### Subtask:
Provide instructions on how to run the developed Streamlit application.

**Reasoning**:
Provide instructions on how to run the Streamlit application.
"""

import streamlit as st

st.subheader("How to Run the Application")
st.write("""
1.  Save the entire code developed for this application as a Python file (e.g., `stock_analyzer_app.py`).
2.  Open a terminal or command prompt on your computer.
3.  Navigate to the directory where you saved the Python file using the `cd` command.
4.  Run the Streamlit application by executing the command: `streamlit run stock_analyzer_app.py` (replace `stock_analyzer_app.py` with the actual name of your Python file if it's different).
5.  Observe the output in the terminal. Streamlit will typically provide a local URL (e.g., `http://localhost:8501`) where you can access the application in your web browser.
6.  Open your web browser and go to the provided URL to interact with the stock analysis application.
""")

"""## Summary:

### Data Analysis Key Findings

*   The application successfully fetches historical stock data for multiple user-specified symbols and time periods using the `yfinance` library.
*   Various technical indicators, including SMA (20 & 50), RSI, MACD, Bollinger Bands, and Volume SMA, are calculated and added to the historical dataframes.
*   Key financial statistics such as Market Cap, 52-Week High/Low, Average Volume, and Current Price are retrieved and displayed using `yfinance`.
*   Fundamental analysis data points like P/E Ratios, EPS, Dividend Yield, and limited Balance Sheet/Income Statement figures are also fetched and displayed.
*   Interactive charts (candlestick, line, volume, technical indicators) are generated using Plotly for each stock, allowing side-by-side comparison.
*   The application includes input fields for stock symbols and time period, and clearly instructs the user on how to run the Streamlit application.

### Insights or Next Steps

*   Enhance the fundamental analysis section by fetching more detailed financial statements (Balance Sheet, Income Statement, Cash Flow) by parsing data directly from `yfinance`'s ticker objects or integrating with other APIs.
*   Add more advanced technical analysis tools and charting options, such as Fibonacci retracements, different chart types (e.g., Heikin Ashi), and the ability to overlay indicators from multiple stocks on a single chart for direct comparison.

"""